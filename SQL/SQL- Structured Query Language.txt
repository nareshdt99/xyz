SQL- Structured Query Language

SSMS-sQL Server management studio

TOPICS COVERD:

1.DDL(Data Defination Language) commands
2.DML(Data Manupulative Language) Commands
3.Retrieve Data From Multiple Tables
4.Inbuilt Functions in SQL
5.Advance Data Base Objects

========================================================================================================================
1.DDL(Data Defination Language) commands : DEFINE SCHEMA OF DATABASE 

Normalisation: is the process of organizing data to avoid duplication and redundancy 
- to minimise duplicate data
- t0 minimise or avoid data manupulation issues
- to simplify Queries

first normal form:
2nd normal form
3rd normal form
===========================================================================
CREATE DATABASE Test1
====================================================================================
CREATE TABLE employe
columnA datatye,
columnB datatype.
......
=====================================================================================
Create table:

USE TEST1
create table TestTable
(
	emp_id int,
	Last_name varchar(50) NOT NULL,
	First_name varchar(50) NOT NULL,
);

============================================================================================
USE TEST1
create table employee
(
	emp_id numeric(4),
	Last_name varchar(20),
	First_name varchar(20),
	mgr_id numeric(4),
	hire_Date date,
	jov_id numeric(4),
	deptno numeric(4),
);
============================================================================================ 
Alter table: used to 
add,delete, modify columns of existing table
add, drop constraints of data table

Alter Table TestTable ADD age INT

Alter Table TestTable drop column age 

Alter Table TestTable alter column emp_id char(20)

==========================================================================================
Drop table :
DROP TABLE Empoyee;
=========================================================================================
use table2

create table NareshTeam
(
	nv_id int,
	user_id varchar(15),
	user_name varchar(20),
	Quality decimal(2),
	Perf decimal(2),
);

alter table NareshTeam add activetime time
alter table NareshTeam drop column user_name 
alter table NareshTeam alter column perf int NOT NULL
DROP TABLE NareshTeam
==========================================================================================
CONSTRAINT:
1.NOT NULL
2.UNIQUE

3.Primary key 
method 1: 
create table emp2
(
	nv_id int PRIMARY KEY,
	user_id varchar(15),
	user_name varchar(20),
	Quality decimal(2),
	Perf decimal(2)
);

METHOD2:
create table emp2
(
	nv_id int,
	user_id varchar(15),
	user_name varchar(20),
	Quality decimal(2),
	Perf decimal(2),
	constraint emp_pk PRIMARY KEY (nv_id)
);

primary key specifies column or set of columns that uniquely identifys a row and it does not allow null values 

sincle primary key can be multple columns
(making both nv_id, user_id as pks at once here method 2 is preferable)
create table emp3   
(
	nv_id int,
	user_id varchar(15),
	user_name varchar(20),
	Quality decimal(2),
	Perf decimal(2),
	constraint emp_pk1 PRIMARY KEY (nv_id,user_id)
);
===========================================================================================
create table emp4
(
	nv_id int,
	user_id varchar(15),
	user_name varchar(20),
	Quality decimal(2),
	Perf decimal(2),
);

alter table emp4 alter column nv_id int not null

ALTER TABLE emp4
ADD CONSTRAINT Emp_pk3 PRIMARY KEY (nv_id)

===========================================================================================
product - parent table
order -child table

CREATE TABLE product
( 
	prod_id int primary key,
	prod_name varchar(50) not null,
	catogory varchar(50)
);
CREATE TABLE Orders
(
	order_id int primary key,
	prod_id int not null,
	qunatity int,

	CONSTRAINT fk_product_id
		FOREIGN KEY (prod_id)
		REFERENCES product (prod_id)
);
=======================================================================================
what if pk, fk is not mentioned initially 
use alter option to alter the table 
###########################
ALTER TABLE Orders1
ADD CONSTRAINT fk_product_id1
    FOREIGN KEY (prod_id)
	REFERENCES product1 (prod_id)
############################
CREATE TABLE product1
( 
	prod_id int primary key,
	prod_name varchar(50) not null,
	catogory varchar(50)
);
CREATE TABLE Orders1
(
	order_id int primary key,
	prod_id int not null,
	qunatity int
);
ALTER TABLE Orders1
ADD CONSTRAINT fk_product_id1
    FOREIGN KEY (prod_id)
	REFERENCES product1 (prod_id)
====================================================================================
ON DELETE Cascade - it will allow us to delete parent table without throughing any error
====================================================================================
Creating views
a view is a named , derived, virtual table
a view takes the output of a query and treats it as a table

CREATE VIEW TestView AS SELECT * FROM emp1

CREATE VIEW TestView1 AS SELECT nv_id,user_id FROM emp1
=====================================================================================
module2:
Data manupulative Language commands

INSEERT
UPDATE
DELETE
SELECT
===================================================================================
insert:
USE table2
INSERT INTO emp1 (nv_id,user_id,user_name)
values (12345,1274,'abcd')
=================================================
create table dept1
(
  deptno int,
  dept_name varchar(50)
);
INSERT INTO dept1 (deptno,dept_name)
values(80,'abc')
INSERT INTO dept1 values(90,'xml')
INSERT INTO dept1 values(70,'axl')
===================================================
INSERT-AS-SELECT

insert into dept2 (deptno,dept_name,loc)
  select * from dept1,

insert into dept2 (deptno,dept_name,loc)
  (select * from dept1 where deptno <80);

where statement is added to choose specific data

insert into dept2 (deptno,dept_name)
  (select deptno,dept_name from dept1); 

ideally if we wont select one colum then bydefault it goes in to null 
if specific column is assigned constarint as not null then it wont execute and through the error
========================================================
update statements:
update dept1 set dept_name = 'marketing' where deptno=90

update dept1 set dept_name = 'IT' where deptno=60
update dept1 set dept_name = 'DATAFACTORY' where loc = 'lxl'
update dept1 set dept_name = 'DATAFACTORY', loc = 'cxl' where deptno=70
==========================================================================================
delete statement  
note: where class is necessary to use in statement to delete specific data ,
if where is not used then it will delete whole table data

DELETE FROM dept2 where deptno = 80
========================================================================================
practice purpose:
 INSERT INTO dept (deptno,dept_name,LOC)
  VALUES (10,'accounts','chennai')
  INSERT INTO dept (deptno,dept_name,LOC)
  VALUES (20,'HR','hyderabad')
  INSERT INTO dept values (30,'IT','Banglore')

create table dept
(
	deptno int,
	dept_name varchar(25),
	LOC varchar(25),
	CONSTRAINT pk_dept PRIMARY KEY (deptno)
);
create table dept3
(
	deptno int,
	dept_name varchar(25),
	LOC varchar(25),
	CONSTRAINT pk_dept3 PRIMARY KEY (deptno)
);
insert into dept3 (deptno,dept_name,LOC)
Select * FROM dept1

create table dept4
(
	deptno int,
	dept_name varchar(25),
	LOC varchar(25)
);
insert into dept4 (deptno,dept_name,LOC)
Select * FROM dept
========================================================================================
Select statement:
SELECT * FROM dept 
SELECT top(2) * FROM dept 
SELECT top(2) dept_name FROM dept
SELECT top(2) deptno,dept_name,LOC FROM dept

adding alis to the column name:
SELECT deptno,LOC AS Location from dept
=======================================================================================
distinct values:


========================================================================================
ORDER BY                ASC- ASSENDING, DESC-DESENDING
SELECT * FROM Dept ORDER BY deptno ASC

FOR DESC:
SELECT TOP(2) * FROM Dept
SELECT TOP(2) * FROM Dept ORDER BY deptno DESC
=====================================================================
Filtering: Logical operators (AND,OR,NOT)
SELECT * FROM dept WHERE deptno = 10 AND dept_name = 'HR'
SELECT * FROM dept WHERE deptno = 10 OR dept_name = 'HR'
SELECT * FROM dept WHERE LOC NOT IN ('chennai','banglore')
=======================================================================
Filtering: Comparison operators (=,!=,<>,<=,>=, LIKE, Between, IN)

Between:
SELECT * FROM dept WHERE salary Between 25000 AND 3000

IN
SELECT * FROM dept WHERE Loc in ('chennai','banglore')

=.>=,<=
SELECT * FROM dept WHERE salary = 30000

LIKE 
SELECT * FROM dept WHERE LOC LIKE 'c%';
% denotes n number of charectors    c%,%i,c%i
SELECT * FROM dept WHERE LOC LIKE 'chen_ _ _';
==========================================================================
case expression:
Used as a type of IF-THEN-ELSE statement
SELECT * FROM dept WHERE salary = NUll  /*it wont execute at all cause , = wont work with null*/
insted i can use /* is operator*/
SELECT * FROM dept WHERE salary IS NUll

SELECT * FROM dept WHERE salary IS NOT NUll

======================================
SELECT CASE(LOC)
WHEN 'chennai' then 'tamilnadu'
WHEN 'hyderabad' then 'Telangana'
ELSE 'NO IDEA'
END
FROM dept
======================================================================================
MODULE3: using joins we can retrive data from avilabel table
=======
Joins in SQL
1.Inner Join
2.Left Join
3.Right Join
4. cross Join
======================================
1.INNER JOIN
SELECT LA.Users, LA.Submitted, QA.Labels_Worked, QA.Qscore
from LA
INNER JOIN QA
ON LA.Users = QA.Users
order by LA.Users

USING ALIAS (LA ALIAS L, QA ALIAS Q USED FOR BELOW TABLE)

SELECT L.Users, Q.Users, L.Submitted, Q.Labels_Worked, Q.Qscore
from LA L
INNER JOIN QA Q
ON L.Users = Q.Users
order by L.Users 
==================================================================================
Left join:
SELECT LA.Users, QA.Users, Submitted, Labels_Worked, QA.Qscore
FROM LA
left JOIN QA
ON LA.Users = QA.Users
order by LA.Users
=========================================================
right join:
SELECT LA.Users, QA.Users, Submitted, Labels_Worked, QA.Qscore
FROM LA
right JOIN QA
ON LA.Users = QA.Users
order by LA.Users
==========================================================
full join:
SELECT LA.Users, QA.Users, Submitted, Labels_Worked, QA.Qscore
FROM LA
full JOIN QA
ON LA.Users = QA.Users
order by LA.Users 
===========================================================
cross join:
SELECT LA.Users, QA.Users, Submitted, Labels_Worked, QA.Qscore
FROM LA
cross JOIN QA
order by LA.Users 
==================================================================================
actual real time scenarrio use we use condition for ex: using where command

SELECT LA.Users, Submitted, Labels_Worked, QA.Qscore
FROM LA
INNER JOIN QA
ON LA.Users = QA.Users
where Labels_Worked > 5000
order by LA.Users                                    update dept set dept_name = "abc" where dept_no=60
===========================================================================================
inbuilt function:

conversion function:
CAST,CONVERT,PARSE

SELECT  CAST('10' AS INT) * 20  AS COST_VAR,
        CONVERT(INT, '10') * 20  AS CONVERT_VAR

TRY_CAST, TRY_CONVERT
SELECT  TRY_CAST('A10' AS INT) * 20  AS COST_VAR,
        TRY_CONVERT(INT, 'A10') * 20  AS CONVERT_VAR
=====================================================================================
Logical Functions:
choose IIF	

SELECT choose (2,'test','zest','just','best')  --OUTPUT IS ZEST
if index(2) is zero or out of range value (5+) so result will be Null


IIF
SELECT IIF (1 > 10, 'TRUE', 'FALSE')


SELECT IIF (11 > 10, 'TRUE', 'FALSE') AS ResultSet
====================================================================================

math functions:
SELECT ABS(-10) AS 'ABS', RAND() AS 'RAND',EXP(4) AS 'EXP',FLOOR(4.66) AS 'FLOOR',CEILING(8.99) AS 'CEILING',SIGN(-8) AS 'SIGN', SQRT(3) AS 'SQRT',SQUARE(4) AS 'SQUARE', POWER(2,6) AS'POWER',ROUND(2.7777777,1) AS 'ROUND'